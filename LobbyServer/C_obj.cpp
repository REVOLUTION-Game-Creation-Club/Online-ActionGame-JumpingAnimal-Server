//
//
//  Generated by Agora Plastic(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : C_obj.cpp
//  @ Date : 2005-08-18
//  @ Author : 
//
//


#include "C_obj.h"

C_obj::C_obj( char* nam,  float mas,  char* sha) {
	name	=	nam;
	mass	=	mas;
	shafe	=	sha;

	surface = 1.5;

	velocity_x = 0.0f;
	velocity_y = 0.0f;
};

C_obj::~C_obj() {

};

void	C_obj::setedge		(int tx, int ty, int wid, int hei){
	x = tx;
	y = ty;
	n_pos_x = tx;
	n_pos_y = ty;

	width = wid;
	height = hei;
	if(strcmp(shafe, "square") == 0) {
		
		/*
		edge[0][0] = x;
		edge[0][1] = y;
		edge[1][0] = x + width;
		edge[1][1] = y;
		edge[2][0] = x;
		edge[2][1] = y + height;
		edge[3][0] = x + width;
		edge[3][1] = y + height;
		*/
	}
	else 
	{
	}
};
void	C_obj::setradius	(float ra){
	if(strcmp(shafe, "circle") == 0) {
		radius = ra;
	}
	else
	{
	}
};

char*	C_obj:: getshafe() {
	return shafe;
};

char*	C_obj:: getname( ) {
	return name;
};

float	C_obj:: getmass() {
	return mass;
};

void	C_obj::getxy(int* tx, int* ty){
	*tx	=	x;
	*ty	=	y;
};

void	C_obj:: getvelocity( float* vx,  float* vy) {
	*vx	=	velocity_x;
	*vy	=	velocity_y;

};

//오브젝트의 이름을 고침
void	C_obj:: rename(char* nam, char* rn) {
	if(	strcmp(name, nam) == 0	){
		name = rn;
	}
};

//질량 변경
void	C_obj:: setmass( float m) {
	mass	=	m;
};

void	C_obj:: setxy( int tx,  int ty) {
	x		=	tx;
	y		=	ty;
};

void	C_obj:: setvelocity(float vx,float vy)
{

		velocity_x = vx;
		velocity_y = vy;

};

void	C_obj:: impulsex			(	float x		)
{
	velocity_x = x;
};

void	C_obj:: impulsey			(	float y		)
{
	velocity_y = y;
};

void	C_obj:: onDraw(HDC& hdc) {
	Rectangle(hdc, x, y, x+width, y+height);
};

void	culision_with	(C_obj* other_obj)
{
};

void	C_obj::setcolision_dir (	int dir		)
{
	colision_direction = dir;
};

int 	C_obj::getcolision_dir ()
{
	return colision_direction;
};

//맵 오브젝트 일 때 사용되는 함수
void	C_obj::moveto			(	int x, int y	) //맵 오브젝트의 이동될 좌표
{
	n_pos_x = x;
	n_pos_y = y;
}

void	C_obj::step_for_fixed	() //맵 오브젝트의 이동 연산
{
	if(x != n_pos_x )
	{
		if( abs(x - n_pos_x) < MAP_OBJ_MOVE_VELOCITY )
		{
			x = n_pos_x;
		}
		else
		{
			x += MAP_OBJ_MOVE_VELOCITY;
		}
	}
	else
	{
		if( y != n_pos_y )
		{
			if( abs( y - n_pos_y ) < MAP_OBJ_MOVE_VELOCITY )
			{
				y = n_pos_y;
			}
			else
			{
				y += MAP_OBJ_MOVE_VELOCITY;
			}
		}
	}
}

void C_obj::step_for_movable()
{
}


// 오브젝트 간 충돌시

void C_obj:: crash_obj_move_up ( C_obj* temp )
{
	velocity_y = -5;
	colision_direction = 1;

	float tvx2, tvy2;
	temp->getvelocity(&tvx2, &tvy2);
	temp->setvelocity(tvx2, 5);
	temp->setcolision_dir(2);
}

void C_obj:: crash_obj_move_down ( C_obj* temp )
{
	float tvx2, tvy2;
	velocity_y = 5;
	colision_direction = 2;

	temp->getvelocity(&tvx2, &tvy2);
	temp->setvelocity(tvx2, -5);
	temp->setcolision_dir(1);
	
}

void C_obj:: crash_obj_move_left ( C_obj* temp )
{
	setcolision_dir(3);
	setvelocity(-velocity_x, velocity_y);
}

void C_obj:: crash_obj_move_right ( C_obj* temp )
{
	setcolision_dir(4);
	setvelocity(-velocity_x, velocity_y);
}

// 고정된 물체와의 충돌 시

void C_obj:: crash_obj_fix_up ( C_obj* temp )
{
	setvelocity(velocity_x/1.5f, 0);
	setxy(x, temp->y + temp->height);
}

void C_obj:: crash_obj_fix_down ( C_obj* temp )
{
	setvelocity(velocity_x/1.5f, 0);
	setxy(x, (temp->y - height));
	
	
}

void C_obj:: crash_obj_fix_left ( C_obj* temp )
{
	setvelocity(-velocity_x, velocity_y);
}

void C_obj:: crash_obj_fix_right ( C_obj* temp )
{
	setvelocity(-velocity_x, velocity_y);
}
